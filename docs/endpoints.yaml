openapi: 3.0.0
info:
  description: "Business Analytics Tracking Service"
  version: "2.0.0"
  title: "B.A.T.S"
tags:
- name: "tokens"
  description: "Token endpoints"
- name: "tags"
  description: "Tag endpoints"
host: localhost:3000/
schemes:
  - http
  - https
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /tokens:
    post:
      tags:
      - "tokens"
      summary: "Create a new token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenBody'
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInfo"
        409:
          description: "Token already created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal server error"
  /tokens/{token}:
    get:
      tags:
      - "tokens"
      summary: "Get information about a token"
      security:
        - bearerAuth: []
      parameters:
      - in: "path"
        name: "token"
        description: "Token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInfo"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Token not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal server error"
    delete:
      tags:
      - "tokens"
      summary: "Delete token and related tags/interactions"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Token not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal server error"
  /tags/{name}:
    get:
      tags:
      - "tags"
      summary: "Get a list of all tags and sub-tags and their metadata"
      security:
        - bearerAuth: []
      parameters:
      - in: "path"
        name: "name"
        description: "Tag name"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "interaction"
        description: "Type of interaction"
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagList"
        204:
          description: "No Content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notice"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "No tags found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal server error"
    post:
      tags:
      - "tags"
      summary: "Create or update a tag and then add an interaction for the tag"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagBody'
      responses:
        201:
          description: "Created"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateTokenBody:
      type: "object"
      properties:
        organization:
          type: "string"
          example: "BATS"
    UpdateTagBody:
      type: "object"
      properties:
        name:
          type: "string"
          example: "groups.group1"
        value:
          type: "string"
          example: "Example Value"
        interaction:
          type: "string"
          example: "ButtonClick"
    TokenInfo:
      type: "object"
      properties:
        organization:
          type: "string"
          example: "BATS"
        issued:
          type: "string"
          example: "2019-11-16 00:00:00"
    TagList:
      type: "array"
      items:
        type: "object"
        properties:
          name:
            type: "string"
            example: "groups.group1"
          created:
            type: "string"
            example: "2019-11-16 00:00:00"
          interactions:
            type: "integer"
            format: "int64"
            example: "100"
    Notice:
      type: "string"
      example: "message"
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"